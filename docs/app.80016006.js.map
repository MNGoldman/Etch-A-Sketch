{"version":3,"sources":["assets/app.ts"],"names":[],"mappings":"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","file":"app.80016006.js","sourceRoot":"..\\src","sourcesContent":["// Initialize Bindings\r\n\r\nconst blackBtn: JQuery < HTMLElement > = $(\"#blackBtn\");\r\nconst rainbowBtn: JQuery < HTMLElement > = $(\"#rainbowBtn\");\r\nconst transparentBtn: JQuery < HTMLElement > = $(\"#transparentBtn\");\r\nconst lightGradientBtn: JQuery < HTMLElement > = $(\"#lightGradientBtn\");\r\nconst darkGradientBtn: JQuery < HTMLElement > = $(\"#darkGradientBtn\");\r\nconst colorBtns: JQuery < HTMLElement > = $(\".color\");\r\nconst clearBtn: JQuery < HTMLElement > = $(\"#clearBtn\");\r\nconst newGridBtn: JQuery < HTMLElement > = $(\"#newGridBtn\");\r\nconst propagateBtn: JQuery < HTMLElement > = $(\"#propagateBtn\");\r\nlet container: JQuery < HTMLElement > = $(\".container\");\r\nlet boxes: JQuery < HTMLElement > ;\r\n\r\n// Initialize Initial State\r\n\r\npopulateGrid(16);\r\n\r\nconst selections: any = {\r\n    color: \"black\",\r\n    propagate: \"off\",\r\n};\r\n\r\n// Initialize Event Listeners\r\n\r\nblackBtn.click(() => selections.color = \"black\");\r\nrainbowBtn.click(() => selections.color = \"rainbow\");\r\ntransparentBtn.click(() => selections.color = \"transparent\");\r\nlightGradientBtn.click(() => selections.color = \"Light Gradient\");\r\ndarkGradientBtn.click(() => selections.color = \"Dark Gradient\");\r\nclearBtn.click(clearGrid);\r\nnewGridBtn.click(newGrid);\r\npropagateBtn.click(propagateToggle);\r\n\r\n// Initialize Function Logic\r\n\r\nfunction populateGrid(gridsize: number) {\r\n    container.attr(\"style\", `grid-template: repeat(${gridsize}, 1fr) / repeat(${gridsize}, 1fr);`);\r\n    for (let i: number = 1; i <= gridsize; i++) {\r\n        for (let j: number = 1; j <= gridsize; j++) {\r\n            const box: JQuery < HTMLElement > = $(`<div></div>`);\r\n            box.addClass(`box x${j}y${i}`);\r\n            box.on(\"transitionend webkitTransitionEnd oTransitionEnd\", propagate);\r\n            box.attr(\"style\", \"background-color: white;\");\r\n            container.append(box);\r\n        }\r\n    }\r\n    boxes = $(\".box\");\r\n    $(\".box\").on(\"mouseenter\", mouseOver);\r\n}\r\n\r\nfunction mouseOver(this: any, prop: any) {\r\n    switch (selections.color) {\r\n        case \"black\":\r\n            $(this).css({backgroundColor: \"black\", borderColor: \"#44c2fc\"});\r\n            $(prop).css({backgroundColor: \"black\", borderColor: \"#44c2fc\"});\r\n            break;\r\n\r\n        case \"rainbow\":\r\n            randomColor($(this));\r\n            randomColor(prop);\r\n            break;\r\n\r\n        case \"transparent\":\r\n            $(this).css({backgroundColor: \"transparent\", borderColor: \"transparent\"});\r\n            $(prop).css({backgroundColor: \"transparent\", borderColor: \"transparent\"});\r\n            break;\r\n\r\n        case \"Light Gradient\":\r\n            changeGradient($(this), -51);\r\n            changeGradient($(prop), -51);\r\n            break;\r\n\r\n        case \"Dark Gradient\":\r\n            changeGradient($(this), 51);\r\n            changeGradient($(prop), 51);\r\n            break;\r\n    }\r\n}\r\n\r\nfunction clearGrid() {\r\n    boxes.each((index: number, box: any) => {\r\n        $(box).css({backgroundColor: \"white\", borderColor: \"#44c2fc\"});\r\n    });\r\n}\r\n\r\nfunction newGrid() {\r\n    const newSize: any = prompt(\"How many squares would you like per side? (128 max)\");\r\n\r\n    if (newSize === null || newSize === undefined || newSize === \"\") {\r\n        alert(\"cancelled\");\r\n    } else if (!isNaN(newSize) && newSize <= 128) {\r\n        boxes.each((index: number, box: any) => box.remove());\r\n        populateGrid(newSize);\r\n    } else {\r\n        alert(\"Please enter a valid number that's less than 128.\");\r\n    }\r\n}\r\n\r\nfunction randomColor(self: JQuery < HTMLElement >) {\r\n    const r: number = Math.floor(Math.random() * 255);\r\n    const g: number = Math.floor(Math.random() * 255);\r\n    const b: number = Math.floor(Math.random() * 255);\r\n    const generate: string = `rgb(${r}, ${g}, ${b})`;\r\n    $(self).css({backgroundColor: generate, borderColor: \"#44c2fc\"});\r\n}\r\n\r\nfunction changeGradient(self: JQuery < HTMLElement >, changeAmount: number) {\r\n    const color: any = $(self).css(\"backgroundColor\").split(\",\");\r\n    let r: number = color[0].split(\"(\")[color[0].split(\"(\").length - 1];\r\n    let g: number = color[1];\r\n    let b: number = color[2].split(\")\")[color[1].split(\")\").length - 1];\r\n\r\n    r -= changeAmount;\r\n    g -= changeAmount;\r\n    b -= changeAmount;\r\n    $(self).css({backgroundColor: `rgb(${r}, ${g}, ${b})`, borderColor: \"#44c2fc\"});\r\n}\r\n\r\nfunction propagate(this: any) {\r\n    if (selections.propagate === \"on\") {\r\n        // tslint:disable-next-line: radix\r\n        const thisY: number = parseInt(this.classList[1].split(\"y\")[1]);\r\n        // tslint:disable-next-line: radix\r\n        const thisX: number = parseInt(this.classList[1].split(\"y\")[0].split(\"x\")[1]);\r\n        const maxSize: number = Math.sqrt(container.children().length);\r\n\r\n        for (let i: number = -1; i <= 1; i++) {\r\n            for (let j: number = -1; j <= 1; j++) {\r\n                const tempX: number = thisX + i;\r\n                const tempY: number = thisY + j;\r\n                if ((i === 0 && j !== 0) || (i !== 0 && j === 0)) {\r\n                    if (tempX >= 1 && tempX <= maxSize && tempY >= 1 && tempY <= maxSize) {\r\n                        const propElement: JQuery < HTMLElement > = $(\".x\" + tempX + \"y\" + tempY);\r\n                        mouseOver(propElement);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction propagateToggle() {\r\n    selections.propagate === \"off\" ? selections.propagate = \"on\" : selections.propagate = \"off\";\r\n    // tslint:disable-next-line: max-line-length\r\n    selections.propagate === \"off\" ? propagateBtn.css(\"backgroundColor\", \"darkred\") : propagateBtn.css(\"backgroundColor\", \"darkgreen\");\r\n}\r\n"]}