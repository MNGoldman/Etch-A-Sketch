{"version":3,"sources":["assets/typescript/app.ts"],"names":[],"mappings":"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","file":"app.fb8fa125.js","sourceRoot":"..\\src","sourcesContent":["// Block Scope Closure\r\n{\r\n    // Initialize Bindings\r\n    const blackBtn: JQuery < HTMLElement > = $(\"#blackBtn\");\r\n    const rainbowBtn: JQuery < HTMLElement > = $(\"#rainbowBtn\");\r\n    const transparentBtn: JQuery < HTMLElement > = $(\"#transparentBtn\");\r\n    const lightGradientBtn: JQuery < HTMLElement > = $(\"#lightGradientBtn\");\r\n    const darkGradientBtn: JQuery < HTMLElement > = $(\"#darkGradientBtn\");\r\n    const colorBtns: JQuery < HTMLElement > = $(\".color\");\r\n    const clearBtn: JQuery < HTMLElement > = $(\"#clearBtn\");\r\n    const newGridBtn: JQuery < HTMLElement > = $(\"#newGridBtn\");\r\n    const propagateBtn: JQuery < HTMLElement > = $(\"#propagateBtn\");\r\n    const container: JQuery < HTMLElement > = $(\".container\");\r\n    let boxes: JQuery < HTMLElement > ;\r\n\r\n    // Initialize Initial State\r\n    populateGrid(16);\r\n\r\n    const selections: any = {\r\n        color: \"black\",\r\n        propagate: \"off\",\r\n    };\r\n\r\n    // Initialize Event Listeners\r\n    blackBtn.click(() => selections.color = \"black\");\r\n    rainbowBtn.click(() => selections.color = \"rainbow\");\r\n    transparentBtn.click(() => selections.color = \"transparent\");\r\n    lightGradientBtn.click(() => selections.color = \"Light Gradient\");\r\n    darkGradientBtn.click(() => selections.color = \"Dark Gradient\");\r\n    clearBtn.click(clearGrid);\r\n    newGridBtn.click(newGrid);\r\n    propagateBtn.click(propagateToggle);\r\n\r\n    // Initialize Function Logic\r\n    function populateGrid(gridsize: number) {\r\n        container.attr(\"style\", `grid-template: repeat(${gridsize}, 1fr) / repeat(${gridsize}, 1fr);`);\r\n        for (let i: number = 1; i <= gridsize; i++) {\r\n            for (let j: number = 1; j <= gridsize; j++) {\r\n                const box: JQuery < HTMLElement > = $(`<div></div>`);\r\n                box.addClass(`box x${j}y${i}`);\r\n                box.on(\"transitionend webkitTransitionEnd oTransitionEnd\", propagate);\r\n                box.attr(\"style\", \"background-color: white;\");\r\n                box.attr(\"tabindex\", 0);\r\n                container.append(box);\r\n            }\r\n        }\r\n        boxes = $(\".box\");\r\n        $(\".box\").on(\"mouseenter keypress\", mouseOver);\r\n    }\r\n\r\n    function mouseOver(this: any, prop: any) {\r\n        switch (selections.color) {\r\n            case \"black\":\r\n                $(this).css({ backgroundColor: \"black\", borderColor: \"#44c2fc\" });\r\n                $(prop).css({ backgroundColor: \"black\", borderColor: \"#44c2fc\" });\r\n                break;\r\n\r\n            case \"rainbow\":\r\n                randomColor($(this));\r\n                randomColor($(prop));\r\n                break;\r\n\r\n            case \"transparent\":\r\n                $(this).css({ backgroundColor: \"transparent\", borderColor: \"transparent\" });\r\n                $(prop).css({ backgroundColor: \"transparent\", borderColor: \"transparent\" });\r\n                break;\r\n\r\n            case \"Light Gradient\":\r\n                changeGradient($(this), -51);\r\n                break;\r\n\r\n            case \"Dark Gradient\":\r\n                changeGradient($(this), 51);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function propagateGradient(prop: any) {\r\n        selections.color === \"Light Gradient\" ? changeGradient($(prop), -51) : changeGradient($(prop), 51);\r\n    }\r\n\r\n    function clearGrid() {\r\n        boxes.each((index: number, box: any) => {\r\n            $(box).css({ backgroundColor: \"white\", borderColor: \"#44c2fc\" });\r\n        });\r\n    }\r\n\r\n    function newGrid() {\r\n        const newSize: any = prompt(\"How many squares would you like per side? (128 max)\");\r\n        if (newSize === null || newSize === undefined || newSize === \"\") {\r\n            alert(\"cancelled\");\r\n        } else if (!isNaN(newSize) && newSize <= 128) {\r\n            boxes.each((index: number, box: any) => box.remove());\r\n            populateGrid(newSize);\r\n        } else {\r\n            alert(\"Please enter a valid number that's less than 128.\");\r\n        }\r\n    }\r\n\r\n    function randomColor(self: JQuery < HTMLElement > ) {\r\n        const r: number = Math.floor(Math.random() * 255);\r\n        const g: number = Math.floor(Math.random() * 255);\r\n        const b: number = Math.floor(Math.random() * 255);\r\n        const generate: string = `rgb(${r}, ${g}, ${b})`;\r\n        $(self).css({ backgroundColor: generate, borderColor: \"#44c2fc\" });\r\n    }\r\n\r\n    function changeGradient(self: JQuery < HTMLElement > , changeAmount: number) {\r\n        const color: any = $(self).css(\"backgroundColor\").split(\",\");\r\n        let r = color[0].split(\"(\")[color[0].split(\"(\").length - 1];\r\n        let g = color[1];\r\n        let b = color[2].split(\")\")[color[1].split(\")\").length - 1];\r\n\r\n        r -= changeAmount;\r\n        g -= changeAmount;\r\n        b -= changeAmount;\r\n        $(self).css({ backgroundColor: `rgb(${r}, ${g}, ${b})`, borderColor: \"#44c2fc\" });\r\n    }\r\n\r\n    function propagate(this: any) {\r\n        if (selections.propagate === \"on\") {\r\n            const thisY: number = parseInt(this.classList[1].split(\"y\")[1], 10);\r\n            const thisX: number = parseInt(this.classList[1].split(\"y\")[0].split(\"x\")[1], 10);\r\n            const maxSize: number = Math.sqrt(container.children().length);\r\n\r\n            for (let i: number = -1; i <= 1; i++) {\r\n                for (let j: number = -1; j <= 1; j++) {\r\n                    const tempX: number = thisX + i;\r\n                    const tempY: number = thisY + j;\r\n                    if ((i === 0 && j !== 0) || (i !== 0 && j === 0)) {\r\n                        if (tempX >= 1 && tempX <= maxSize && tempY >= 1 && tempY <= maxSize) {\r\n                            const propElement: JQuery < HTMLElement > = $(\".x\" + tempX + \"y\" + tempY);\r\n                            selections.color !== \"Light Gradient\" && selections.color !== \"Dark Gradient\" ?\r\n                                mouseOver(propElement) : propagateGradient(propElement);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function propagateToggle() {\r\n        selections.propagate === \"off\" ? selections.propagate = \"on\" : selections.propagate = \"off\";\r\n        selections.propagate === \"off\" ? propagateBtn.css(\"backgroundColor\", \"darkred\") : propagateBtn.css(\"backgroundColor\", \"darkgreen\");\r\n    }\r\n}\r\n"]}