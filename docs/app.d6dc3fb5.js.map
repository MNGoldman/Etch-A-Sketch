{"version":3,"sources":["assets/app.ts"],"names":[],"mappings":";AAAA,aAEA,IAUI,EAVE,EAAW,EAAE,aACb,EAAa,EAAE,eACf,EAAiB,EAAE,mBACnB,EAAmB,EAAE,qBACrB,EAAkB,EAAE,oBACpB,EAAY,EAAE,UACd,EAAW,EAAE,aACb,EAAa,EAAE,eACf,EAAe,EAAE,iBACnB,EAAiB,EAAE,cAKvB,EAAa,IAEb,IAAM,EAAkB,CACpB,MAAO,QACP,WAAW,GAgBf,SAAS,EAAa,GAClB,EAAU,KAAK,QAAkC,yBAAA,OAAA,EAA2B,oBAAA,OAAA,EAA5E,YACK,IAAA,IAAI,EAAY,EAAG,GAAK,EAAU,IAC9B,IAAA,IAAI,EAAY,EAAG,GAAK,EAAU,IAAK,CAClC,IAAA,EAAW,EAAjB,eACA,EAAI,SAAiB,QAAA,OAAA,EAAK,KAAA,OAAA,IAC1B,EAAI,KAAK,QAAS,4BAClB,EAAU,OAAO,GAGzB,EAAQ,EAAE,QACV,EAAE,QAAQ,GAAG,aAAc,GAG/B,SAAS,IAEG,OAAA,EAAW,OACV,IAAA,QACL,EAAE,MAAM,IAAI,CAAC,gBAAiB,QAAS,YAAa,YACpD,MAEK,IAAA,UACL,EAAE,MAAM,IAAI,CAAC,gBAAiB,IAAc,SAAU,YAAa,YACnE,MAEK,IAAA,cACL,EAAE,MAAM,IAAI,CAAC,gBAAiB,cAAe,YAAa,gBAC1D,MAEK,IAAA,iBACL,EAAe,EAAE,OAAQ,IACzB,MAEK,IAAA,gBACL,EAAe,EAAE,MAAO,KAKhC,SAAS,IACL,EAAM,KAAK,SAAC,EAAe,GACvB,EAAE,GAAK,IAAI,CAAC,gBAAiB,QAAS,YAAa,cAI3D,SAAS,IACC,IAAA,EAAe,OAAO,uDAExB,MAAA,GAAyD,KAAZ,EAC7C,MAAM,cACE,MAAM,IAAY,GAAW,KACrC,EAAM,KAAK,SAAC,EAAe,GAAa,OAAA,EAAI,WAC5C,EAAa,IAEb,MAAM,qDAId,SAAS,IACC,IAAA,EAAY,KAAK,MAAsB,IAAhB,KAAK,UAC5B,EAAY,KAAK,MAAsB,IAAhB,KAAK,UAC5B,EAAY,KAAK,MAAsB,IAAhB,KAAK,UAE3B,MAAA,CACH,SAF4B,OAAA,OAAA,EAAM,MAAA,OAAA,EAAM,MAAA,OAAA,EAA5C,MAMJ,SAAS,EAAe,EAAW,GACzB,IAAA,EAAa,EAAE,GAAM,IAAI,mBAAmB,MAAM,KACpD,EAAI,EAAM,GAAG,MAAM,KAAK,EAAM,GAAG,MAAM,KAAK,OAAS,GACrD,EAAI,EAAM,GACV,EAAI,EAAM,GAAG,MAAM,KAAK,EAAM,GAAG,MAAM,KAAK,OAAS,GAEzD,GAAK,EACL,GAAK,EACL,GAAK,EACL,EAAE,GAAM,IAAI,CAAC,gBAAwB,OAAA,OAAA,EAAM,MAAA,OAAA,EAAM,MAAA,OAAA,EAArC,KAA2C,YAAa,YAxFxE,EAAS,MAAM,WAAM,OAAA,EAAW,MAAQ,UACxC,EAAW,MAAM,WAAM,OAAA,EAAW,MAAQ,YAC1C,EAAe,MAAM,WAAM,OAAA,EAAW,MAAQ,gBAC9C,EAAiB,MAAM,WAAM,OAAA,EAAW,MAAQ,mBAChD,EAAgB,MAAM,WAAM,OAAA,EAAW,MAAQ,kBAC/C,EAAS,MAAM,GACf,EAAW,MAAM,GACjB,EAAa,MAAM,WAAM,OAAyB,IAAzB,EAAW,UAAqB,EAAW,WAAY,EAAQ,EAAW,WAAY","file":"app.d6dc3fb5.js","sourceRoot":"..\\src","sourcesContent":["// Initialize Bindings\r\n\r\nconst blackBtn = $(\"#blackBtn\");\r\nconst rainbowBtn = $(\"#rainbowBtn\");\r\nconst transparentBtn = $(\"#transparentBtn\");\r\nconst lightGradientBtn = $(\"#lightGradientBtn\");\r\nconst darkGradientBtn = $(\"#darkGradientBtn\");\r\nconst colorBtns = $(\".color\");\r\nconst clearBtn = $(\"#clearBtn\");\r\nconst newGridBtn = $(\"#newGridBtn\");\r\nconst propagateBtn = $(\"#propagatebtn\");\r\nlet container: any = $(\".container\");\r\nlet boxes: JQuery<HTMLElement>;\r\n\r\n// Initialize Initial State\r\n\r\npopulateGrid(16);\r\n\r\nconst selections: any = {\r\n    color: \"black\",\r\n    propagate: false,\r\n};\r\n\r\n// Initialize Event Listeners\r\n\r\nblackBtn.click(() => selections.color = \"black\");\r\nrainbowBtn.click(() => selections.color = \"rainbow\");\r\ntransparentBtn.click(() => selections.color = \"transparent\");\r\nlightGradientBtn.click(() => selections.color = \"Light Gradient\");\r\ndarkGradientBtn.click(() => selections.color = \"Dark Gradient\");\r\nclearBtn.click(clearGrid);\r\nnewGridBtn.click(newGrid);\r\npropagateBtn.click(() => selections.propagate === true ? selections.propagate = false : selections.propagate = true);\r\n\r\n// Initialize Function Logic\r\n\r\nfunction populateGrid(gridsize: number) {\r\n    container.attr(\"style\", `grid-template: repeat(${gridsize}, 1fr) / repeat(${gridsize}, 1fr);`);\r\n    for (let i: number = 1; i <= gridsize; i++) {\r\n        for (let j: number = 1; j <= gridsize; j++) {\r\n            const box: any = $(`<div></div>`);\r\n            box.addClass(`box x${j}y${i}`);\r\n            box.attr(\"style\", \"background-color: white;\");\r\n            container.append(box);\r\n        }\r\n    }\r\n    boxes = $(\".box\");\r\n    $(\".box\").on(\"mouseenter\", mouseOver);\r\n}\r\n\r\nfunction mouseOver(this: any) {\r\n\r\n    switch (selections.color) {\r\n        case \"black\":\r\n        $(this).css({backgroundColor: \"black\", borderColor: \"#44c2fc\"});\r\n        break;\r\n\r\n        case \"rainbow\":\r\n        $(this).css({backgroundColor: randomColor().generate, borderColor: \"#44c2fc\"});\r\n        break;\r\n\r\n        case \"transparent\":\r\n        $(this).css({backgroundColor: \"transparent\", borderColor: \"transparent\"});\r\n        break;\r\n\r\n        case \"Light Gradient\":\r\n        changeGradient($(this), -51);\r\n        break;\r\n\r\n        case \"Dark Gradient\":\r\n        changeGradient($(this), 51);\r\n        break;\r\n    }\r\n}\r\n\r\nfunction clearGrid() {\r\n    boxes.each((index: number, box: any) => {\r\n        $(box).css({backgroundColor: \"white\", borderColor: \"#44c2fc\"});\r\n    });\r\n}\r\n\r\nfunction newGrid() {\r\n    const newSize: any = prompt(\"How many squares would you like per side? (128 max)\");\r\n\r\n    if (newSize === null || newSize === undefined || newSize === \"\") {\r\n        alert(\"cancelled\");\r\n    } else if (!isNaN(newSize) && newSize <= 128) {\r\n        boxes.each((index: number, box: any) => box.remove());\r\n        populateGrid(newSize);\r\n    } else {\r\n        alert(\"Please enter a valid number that's less than 128.\");\r\n    }\r\n}\r\n\r\nfunction randomColor() {\r\n    const r: number = Math.floor(Math.random() * 255);\r\n    const g: number = Math.floor(Math.random() * 255);\r\n    const b: number = Math.floor(Math.random() * 255);\r\n    const generate: string = `rgb(${r}, ${g}, ${b})`;\r\n    return {\r\n        generate,\r\n    };\r\n}\r\n\r\nfunction changeGradient(self: any, changeAmount: number) {\r\n    const color: any = $(self).css(\"backgroundColor\").split(\",\");\r\n    let r = color[0].split(\"(\")[color[0].split(\"(\").length - 1];\r\n    let g = color[1];\r\n    let b = color[2].split(\")\")[color[1].split(\")\").length - 1];\r\n\r\n    r -= changeAmount;\r\n    g -= changeAmount;\r\n    b -= changeAmount;\r\n    $(self).css({backgroundColor: `rgb(${r}, ${g}, ${b})`, borderColor: \"#44c2fc\"});\r\n}\r\n"]}